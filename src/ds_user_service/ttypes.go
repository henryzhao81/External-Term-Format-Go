// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ds_user_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type StorageId string

func StorageIdPtr(v StorageId) *StorageId { return &v }

type MarketId string

func MarketIdPtr(v MarketId) *MarketId { return &v }

type AdvertiserId string

func AdvertiserIdPtr(v AdvertiserId) *AdvertiserId { return &v }

type RtbData string

func RtbDataPtr(v RtbData) *RtbData { return &v }

type PlatformHash string

func PlatformHashPtr(v PlatformHash) *PlatformHash { return &v }

type SegmentId int32

func SegmentIdPtr(v SegmentId) *SegmentId { return &v }

type Timestamp int64

func TimestampPtr(v Timestamp) *Timestamp { return &v }

type ConversionId string

func ConversionIdPtr(v ConversionId) *ConversionId { return &v }

type AdId string

func AdIdPtr(v AdId) *AdId { return &v }

type OrderId string

func OrderIdPtr(v OrderId) *OrderId { return &v }

type LineitemId string

func LineitemIdPtr(v LineitemId) *LineitemId { return &v }

type TraxId string

func TraxIdPtr(v TraxId) *TraxId { return &v }

type AdUnitId string

func AdUnitIdPtr(v AdUnitId) *AdUnitId { return &v }

type PageId string

func PageIdPtr(v PageId) *PageId { return &v }

type CookieStateId string

func CookieStateIdPtr(v CookieStateId) *CookieStateId { return &v }

type CookieState string

func CookieStatePtr(v CookieState) *CookieState { return &v }

type ConversionType string

func ConversionTypePtr(v ConversionType) *ConversionType { return &v }

type PublisherId string

func PublisherIdPtr(v PublisherId) *PublisherId { return &v }

type SiteId string

func SiteIdPtr(v SiteId) *SiteId { return &v }

type DeviceId string

func DeviceIdPtr(v DeviceId) *DeviceId { return &v }

type PackageId string

func PackageIdPtr(v PackageId) *PackageId { return &v }

type DealId string

func DealIdPtr(v DealId) *DealId { return &v }

type CrossDeviceId string

func CrossDeviceIdPtr(v CrossDeviceId) *CrossDeviceId { return &v }

type CrossDeviceIdType string

func CrossDeviceIdTypePtr(v CrossDeviceIdType) *CrossDeviceIdType { return &v }

type CrossDeviceIdSrc string

func CrossDeviceIdSrcPtr(v CrossDeviceIdSrc) *CrossDeviceIdSrc { return &v }

type PublisherSegments []*PubSegment

func PublisherSegmentsPtr(v PublisherSegments) *PublisherSegments { return &v }

type AdvertisersRetarget []*AdvDatum

func AdvertisersRetargetPtr(v AdvertisersRetarget) *AdvertisersRetarget { return &v }

type AdvertisersSegments []*AdvSegment

func AdvertisersSegmentsPtr(v AdvertisersSegments) *AdvertisersSegments { return &v }

type AdvertisersRtb []*AdvRtbData

func AdvertisersRtbPtr(v AdvertisersRtb) *AdvertisersRtb { return &v }

type DmpSegmentMap map[string]*ExtSegment

func DmpSegmentMapPtr(v DmpSegmentMap) *DmpSegmentMap { return &v }

type PublisherSegmentMap map[string]DmpSegmentMap

func PublisherSegmentMapPtr(v PublisherSegmentMap) *PublisherSegmentMap { return &v }

type Conversions []*UserConv

func ConversionsPtr(v Conversions) *Conversions { return &v }

type DeviceData []*DeviceDatum

func DeviceDataPtr(v DeviceData) *DeviceData { return &v }

type DeviceDataKeys []string

func DeviceDataKeysPtr(v DeviceDataKeys) *DeviceDataKeys { return &v }

type Context map[string]string

func ContextPtr(v Context) *Context { return &v }

// Attributes:
//  - SegmentID
//  - Timestamp
type PubSegment struct {
	SegmentID SegmentId `thrift:"segment_id,1" json:"segment_id"`
	Timestamp Timestamp `thrift:"timestamp,2" json:"timestamp"`
}

func NewPubSegment() *PubSegment {
	return &PubSegment{}
}

func (p *PubSegment) GetSegmentID() SegmentId {
	return p.SegmentID
}

func (p *PubSegment) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *PubSegment) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PubSegment) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SegmentId(v)
		p.SegmentID = temp
	}
	return nil
}

func (p *PubSegment) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *PubSegment) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PubSegment"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PubSegment) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("segment_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SegmentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.segment_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment_id: ", p), err)
	}
	return err
}

func (p *PubSegment) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *PubSegment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PubSegment(%+v)", *p)
}

// Attributes:
//  - AdvertiserID
//  - Key
//  - Value
//  - Timestamp
type AdvDatum struct {
	AdvertiserID AdvertiserId `thrift:"advertiser_id,1" json:"advertiser_id"`
	Key          string       `thrift:"key,2" json:"key"`
	Value        string       `thrift:"value,3" json:"value"`
	Timestamp    Timestamp    `thrift:"timestamp,4" json:"timestamp"`
}

func NewAdvDatum() *AdvDatum {
	return &AdvDatum{}
}

func (p *AdvDatum) GetAdvertiserID() AdvertiserId {
	return p.AdvertiserID
}

func (p *AdvDatum) GetKey() string {
	return p.Key
}

func (p *AdvDatum) GetValue() string {
	return p.Value
}

func (p *AdvDatum) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *AdvDatum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdvDatum) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AdvertiserId(v)
		p.AdvertiserID = temp
	}
	return nil
}

func (p *AdvDatum) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *AdvDatum) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *AdvDatum) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *AdvDatum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdvDatum"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdvDatum) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:advertiser_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdvertiserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:advertiser_id: ", p), err)
	}
	return err
}

func (p *AdvDatum) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err)
	}
	return err
}

func (p *AdvDatum) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *AdvDatum) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *AdvDatum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdvDatum(%+v)", *p)
}

// Attributes:
//  - AdvertiserID
//  - SegmentID
//  - Timestamp
type AdvSegment struct {
	AdvertiserID AdvertiserId `thrift:"advertiser_id,1" json:"advertiser_id"`
	SegmentID    SegmentId    `thrift:"segment_id,2" json:"segment_id"`
	Timestamp    Timestamp    `thrift:"timestamp,3" json:"timestamp"`
}

func NewAdvSegment() *AdvSegment {
	return &AdvSegment{}
}

func (p *AdvSegment) GetAdvertiserID() AdvertiserId {
	return p.AdvertiserID
}

func (p *AdvSegment) GetSegmentID() SegmentId {
	return p.SegmentID
}

func (p *AdvSegment) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *AdvSegment) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdvSegment) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AdvertiserId(v)
		p.AdvertiserID = temp
	}
	return nil
}

func (p *AdvSegment) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SegmentId(v)
		p.SegmentID = temp
	}
	return nil
}

func (p *AdvSegment) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *AdvSegment) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdvSegment"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdvSegment) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:advertiser_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdvertiserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:advertiser_id: ", p), err)
	}
	return err
}

func (p *AdvSegment) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("segment_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:segment_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SegmentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.segment_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:segment_id: ", p), err)
	}
	return err
}

func (p *AdvSegment) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *AdvSegment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdvSegment(%+v)", *p)
}

// Attributes:
//  - AdvertiserID
//  - RtbData
//  - Timestamp
type AdvRtbData struct {
	AdvertiserID AdvertiserId `thrift:"advertiser_id,1" json:"advertiser_id"`
	RtbData      RtbData      `thrift:"rtb_data,2" json:"rtb_data"`
	Timestamp    Timestamp    `thrift:"timestamp,3" json:"timestamp"`
}

func NewAdvRtbData() *AdvRtbData {
	return &AdvRtbData{}
}

func (p *AdvRtbData) GetAdvertiserID() AdvertiserId {
	return p.AdvertiserID
}

func (p *AdvRtbData) GetRtbData() RtbData {
	return p.RtbData
}

func (p *AdvRtbData) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *AdvRtbData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdvRtbData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AdvertiserId(v)
		p.AdvertiserID = temp
	}
	return nil
}

func (p *AdvRtbData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := RtbData(v)
		p.RtbData = temp
	}
	return nil
}

func (p *AdvRtbData) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *AdvRtbData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdvRtbData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdvRtbData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:advertiser_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdvertiserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:advertiser_id: ", p), err)
	}
	return err
}

func (p *AdvRtbData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rtb_data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rtb_data: ", p), err)
	}
	if err := oprot.WriteString(string(p.RtbData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rtb_data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rtb_data: ", p), err)
	}
	return err
}

func (p *AdvRtbData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *AdvRtbData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdvRtbData(%+v)", *p)
}

// Attributes:
//  - Segments
//  - Timestamp
type ExtSegment struct {
	Segments  []string  `thrift:"segments,1" json:"segments"`
	Timestamp Timestamp `thrift:"timestamp,2" json:"timestamp"`
}

func NewExtSegment() *ExtSegment {
	return &ExtSegment{}
}

func (p *ExtSegment) GetSegments() []string {
	return p.Segments
}

func (p *ExtSegment) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *ExtSegment) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtSegment) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Segments = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Segments = append(p.Segments, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExtSegment) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *ExtSegment) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtSegment"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtSegment) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("segments", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Segments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Segments {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segments: ", p), err)
	}
	return err
}

func (p *ExtSegment) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *ExtSegment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtSegment(%+v)", *p)
}

// Attributes:
//  - Retarget
//  - Rtb
//  - Segments
//  - PubSegments
type AdvertisersData struct {
	Retarget    AdvertisersRetarget `thrift:"retarget,1" json:"retarget"`
	Rtb         AdvertisersRtb      `thrift:"rtb,2" json:"rtb"`
	Segments    AdvertisersSegments `thrift:"segments,3" json:"segments"`
	PubSegments PublisherSegmentMap `thrift:"pub_segments,4" json:"pub_segments,omitempty"`
}

func NewAdvertisersData() *AdvertisersData {
	return &AdvertisersData{}
}

func (p *AdvertisersData) GetRetarget() AdvertisersRetarget {
	return p.Retarget
}

func (p *AdvertisersData) GetRtb() AdvertisersRtb {
	return p.Rtb
}

func (p *AdvertisersData) GetSegments() AdvertisersSegments {
	return p.Segments
}

var AdvertisersData_PubSegments_DEFAULT PublisherSegmentMap

func (p *AdvertisersData) GetPubSegments() PublisherSegmentMap {
	return p.PubSegments
}
func (p *AdvertisersData) IsSetPubSegments() bool {
	return p.PubSegments != nil
}

func (p *AdvertisersData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdvertisersData) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(AdvertisersRetarget, 0, size)
	p.Retarget = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &AdvDatum{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Retarget = append(p.Retarget, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdvertisersData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(AdvertisersRtb, 0, size)
	p.Rtb = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &AdvRtbData{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Rtb = append(p.Rtb, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdvertisersData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(AdvertisersSegments, 0, size)
	p.Segments = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &AdvSegment{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Segments = append(p.Segments, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdvertisersData) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(PublisherSegmentMap, size)
	p.PubSegments = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(DmpSegmentMap, size)
		_val5 := tMap
		for i := 0; i < size; i++ {
			var _key6 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key6 = v
			}
			_val7 := &ExtSegment{}
			if err := _val7.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
			}
			_val5[_key6] = _val7
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PubSegments[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdvertisersData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdvertisersData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdvertisersData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retarget", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retarget: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Retarget)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Retarget {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retarget: ", p), err)
	}
	return err
}

func (p *AdvertisersData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rtb", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rtb: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rtb)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rtb {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rtb: ", p), err)
	}
	return err
}

func (p *AdvertisersData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("segments", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:segments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Segments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Segments {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:segments: ", p), err)
	}
	return err
}

func (p *AdvertisersData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPubSegments() {
		if err := oprot.WriteFieldBegin("pub_segments", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pub_segments: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.PubSegments)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.PubSegments {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pub_segments: ", p), err)
		}
	}
	return err
}

func (p *AdvertisersData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdvertisersData(%+v)", *p)
}

// Attributes:
//  - ConversionID
//  - OrderID
//  - Type
//  - AdID
//  - Window
//  - Timestamp
//  - LineitemID
//  - TraxID
//  - AdUnitID
//  - PageID
//  - Price
//  - Currency
//  - EndOfFunnel
//  - AdvertiserID
//  - PublisherID
//  - SiteID
//  - AdvertiserPlatformHash
//  - AdvertiserBuyingModel
//  - MarketWon
//  - Domain
//  - PackageID
//  - DealID
//  - LineitemType
type UserConv struct {
	ConversionID           ConversionId   `thrift:"conversion_id,1" json:"conversion_id"`
	OrderID                OrderId        `thrift:"order_id,2" json:"order_id"`
	Type                   ConversionType `thrift:"type,3" json:"type"`
	AdID                   AdId           `thrift:"ad_id,4" json:"ad_id"`
	Window                 int32          `thrift:"window,5" json:"window"`
	Timestamp              int32          `thrift:"timestamp,6" json:"timestamp"`
	LineitemID             LineitemId     `thrift:"lineitem_id,7" json:"lineitem_id"`
	TraxID                 TraxId         `thrift:"trax_id,8" json:"trax_id"`
	AdUnitID               AdUnitId       `thrift:"ad_unit_id,9" json:"ad_unit_id"`
	PageID                 *PageId        `thrift:"page_id,10" json:"page_id,omitempty"`
	Price                  int64          `thrift:"price,11" json:"price"`
	Currency               string         `thrift:"currency,12" json:"currency"`
	EndOfFunnel            bool           `thrift:"end_of_funnel,13" json:"end_of_funnel"`
	AdvertiserID           AdvertiserId   `thrift:"advertiser_id,14" json:"advertiser_id"`
	PublisherID            PublisherId    `thrift:"publisher_id,15" json:"publisher_id"`
	SiteID                 SiteId         `thrift:"site_id,16" json:"site_id"`
	AdvertiserPlatformHash PlatformHash   `thrift:"advertiser_platform_hash,17" json:"advertiser_platform_hash"`
	AdvertiserBuyingModel  int16          `thrift:"advertiser_buying_model,18" json:"advertiser_buying_model"`
	MarketWon              int16          `thrift:"market_won,19" json:"market_won"`
	Domain                 *string        `thrift:"domain,20" json:"domain,omitempty"`
	PackageID              *PackageId     `thrift:"package_id,21" json:"package_id,omitempty"`
	DealID                 *DealId        `thrift:"deal_id,22" json:"deal_id,omitempty"`
	LineitemType           *string        `thrift:"lineitem_type,23" json:"lineitem_type,omitempty"`
}

func NewUserConv() *UserConv {
	return &UserConv{}
}

func (p *UserConv) GetConversionID() ConversionId {
	return p.ConversionID
}

func (p *UserConv) GetOrderID() OrderId {
	return p.OrderID
}

func (p *UserConv) GetType() ConversionType {
	return p.Type
}

func (p *UserConv) GetAdID() AdId {
	return p.AdID
}

func (p *UserConv) GetWindow() int32 {
	return p.Window
}

func (p *UserConv) GetTimestamp() int32 {
	return p.Timestamp
}

func (p *UserConv) GetLineitemID() LineitemId {
	return p.LineitemID
}

func (p *UserConv) GetTraxID() TraxId {
	return p.TraxID
}

func (p *UserConv) GetAdUnitID() AdUnitId {
	return p.AdUnitID
}

var UserConv_PageID_DEFAULT PageId

func (p *UserConv) GetPageID() PageId {
	if !p.IsSetPageID() {
		return UserConv_PageID_DEFAULT
	}
	return *p.PageID
}

func (p *UserConv) GetPrice() int64 {
	return p.Price
}

func (p *UserConv) GetCurrency() string {
	return p.Currency
}

func (p *UserConv) GetEndOfFunnel() bool {
	return p.EndOfFunnel
}

func (p *UserConv) GetAdvertiserID() AdvertiserId {
	return p.AdvertiserID
}

func (p *UserConv) GetPublisherID() PublisherId {
	return p.PublisherID
}

func (p *UserConv) GetSiteID() SiteId {
	return p.SiteID
}

func (p *UserConv) GetAdvertiserPlatformHash() PlatformHash {
	return p.AdvertiserPlatformHash
}

func (p *UserConv) GetAdvertiserBuyingModel() int16 {
	return p.AdvertiserBuyingModel
}

func (p *UserConv) GetMarketWon() int16 {
	return p.MarketWon
}

var UserConv_Domain_DEFAULT string

func (p *UserConv) GetDomain() string {
	if !p.IsSetDomain() {
		return UserConv_Domain_DEFAULT
	}
	return *p.Domain
}

var UserConv_PackageID_DEFAULT PackageId

func (p *UserConv) GetPackageID() PackageId {
	if !p.IsSetPackageID() {
		return UserConv_PackageID_DEFAULT
	}
	return *p.PackageID
}

var UserConv_DealID_DEFAULT DealId

func (p *UserConv) GetDealID() DealId {
	if !p.IsSetDealID() {
		return UserConv_DealID_DEFAULT
	}
	return *p.DealID
}

var UserConv_LineitemType_DEFAULT string

func (p *UserConv) GetLineitemType() string {
	if !p.IsSetLineitemType() {
		return UserConv_LineitemType_DEFAULT
	}
	return *p.LineitemType
}
func (p *UserConv) IsSetPageID() bool {
	return p.PageID != nil
}

func (p *UserConv) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *UserConv) IsSetPackageID() bool {
	return p.PackageID != nil
}

func (p *UserConv) IsSetDealID() bool {
	return p.DealID != nil
}

func (p *UserConv) IsSetLineitemType() bool {
	return p.LineitemType != nil
}

func (p *UserConv) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserConv) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ConversionId(v)
		p.ConversionID = temp
	}
	return nil
}

func (p *UserConv) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := OrderId(v)
		p.OrderID = temp
	}
	return nil
}

func (p *UserConv) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ConversionType(v)
		p.Type = temp
	}
	return nil
}

func (p *UserConv) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := AdId(v)
		p.AdID = temp
	}
	return nil
}

func (p *UserConv) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Window = v
	}
	return nil
}

func (p *UserConv) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *UserConv) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := LineitemId(v)
		p.LineitemID = temp
	}
	return nil
}

func (p *UserConv) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := TraxId(v)
		p.TraxID = temp
	}
	return nil
}

func (p *UserConv) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := AdUnitId(v)
		p.AdUnitID = temp
	}
	return nil
}

func (p *UserConv) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := PageId(v)
		p.PageID = &temp
	}
	return nil
}

func (p *UserConv) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *UserConv) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *UserConv) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.EndOfFunnel = v
	}
	return nil
}

func (p *UserConv) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := AdvertiserId(v)
		p.AdvertiserID = temp
	}
	return nil
}

func (p *UserConv) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := PublisherId(v)
		p.PublisherID = temp
	}
	return nil
}

func (p *UserConv) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := SiteId(v)
		p.SiteID = temp
	}
	return nil
}

func (p *UserConv) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := PlatformHash(v)
		p.AdvertiserPlatformHash = temp
	}
	return nil
}

func (p *UserConv) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.AdvertiserBuyingModel = v
	}
	return nil
}

func (p *UserConv) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.MarketWon = v
	}
	return nil
}

func (p *UserConv) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *UserConv) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := PackageId(v)
		p.PackageID = &temp
	}
	return nil
}

func (p *UserConv) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := DealId(v)
		p.DealID = &temp
	}
	return nil
}

func (p *UserConv) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.LineitemType = &v
	}
	return nil
}

func (p *UserConv) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserConv"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserConv) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conversion_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conversion_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConversionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.conversion_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conversion_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *UserConv) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ad_id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ad_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ad_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ad_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("window", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:window: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Window)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.window (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:window: ", p), err)
	}
	return err
}

func (p *UserConv) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
	}
	return err
}

func (p *UserConv) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lineitem_id", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lineitem_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.LineitemID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lineitem_id (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lineitem_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trax_id", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:trax_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.TraxID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trax_id (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:trax_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ad_unit_id", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ad_unit_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdUnitID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ad_unit_id (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ad_unit_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageID() {
		if err := oprot.WriteFieldBegin("page_id", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:page_id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PageID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.page_id (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:page_id: ", p), err)
		}
	}
	return err
}

func (p *UserConv) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:price: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:price: ", p), err)
	}
	return err
}

func (p *UserConv) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:currency: ", p), err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currency (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:currency: ", p), err)
	}
	return err
}

func (p *UserConv) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_of_funnel", thrift.BOOL, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:end_of_funnel: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EndOfFunnel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_of_funnel (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:end_of_funnel: ", p), err)
	}
	return err
}

func (p *UserConv) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_id", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:advertiser_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdvertiserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_id (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:advertiser_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publisher_id", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:publisher_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.PublisherID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publisher_id (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:publisher_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("site_id", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:site_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SiteID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.site_id (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:site_id: ", p), err)
	}
	return err
}

func (p *UserConv) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_platform_hash", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:advertiser_platform_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.AdvertiserPlatformHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_platform_hash (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:advertiser_platform_hash: ", p), err)
	}
	return err
}

func (p *UserConv) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("advertiser_buying_model", thrift.I16, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:advertiser_buying_model: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.AdvertiserBuyingModel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.advertiser_buying_model (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:advertiser_buying_model: ", p), err)
	}
	return err
}

func (p *UserConv) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("market_won", thrift.I16, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:market_won: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MarketWon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.market_won (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:market_won: ", p), err)
	}
	return err
}

func (p *UserConv) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:domain: ", p), err)
		}
	}
	return err
}

func (p *UserConv) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageID() {
		if err := oprot.WriteFieldBegin("package_id", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:package_id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PackageID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.package_id (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:package_id: ", p), err)
		}
	}
	return err
}

func (p *UserConv) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetDealID() {
		if err := oprot.WriteFieldBegin("deal_id", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:deal_id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DealID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deal_id (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:deal_id: ", p), err)
		}
	}
	return err
}

func (p *UserConv) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineitemType() {
		if err := oprot.WriteFieldBegin("lineitem_type", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:lineitem_type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LineitemType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lineitem_type (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:lineitem_type: ", p), err)
		}
	}
	return err
}

func (p *UserConv) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserConv(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - Timestamp
type DeviceDatum struct {
	Key       string    `thrift:"key,1" json:"key"`
	Value     string    `thrift:"value,2" json:"value"`
	Timestamp Timestamp `thrift:"timestamp,3" json:"timestamp"`
}

func NewDeviceDatum() *DeviceDatum {
	return &DeviceDatum{}
}

func (p *DeviceDatum) GetKey() string {
	return p.Key
}

func (p *DeviceDatum) GetValue() string {
	return p.Value
}

func (p *DeviceDatum) GetTimestamp() Timestamp {
	return p.Timestamp
}
func (p *DeviceDatum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeviceDatum) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *DeviceDatum) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *DeviceDatum) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = temp
	}
	return nil
}

func (p *DeviceDatum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeviceDatum"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeviceDatum) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *DeviceDatum) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *DeviceDatum) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *DeviceDatum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceDatum(%+v)", *p)
}

// Attributes:
//  - CrossDeviceID
//  - CrossDeviceIDType
//  - CrossDeviceIDSrc
type CrossDeviceData struct {
	CrossDeviceID     CrossDeviceId     `thrift:"cross_device_id,1" json:"cross_device_id"`
	CrossDeviceIDType CrossDeviceIdType `thrift:"cross_device_id_type,2" json:"cross_device_id_type"`
	CrossDeviceIDSrc  CrossDeviceIdSrc  `thrift:"cross_device_id_src,3" json:"cross_device_id_src"`
}

func NewCrossDeviceData() *CrossDeviceData {
	return &CrossDeviceData{}
}

func (p *CrossDeviceData) GetCrossDeviceID() CrossDeviceId {
	return p.CrossDeviceID
}

func (p *CrossDeviceData) GetCrossDeviceIDType() CrossDeviceIdType {
	return p.CrossDeviceIDType
}

func (p *CrossDeviceData) GetCrossDeviceIDSrc() CrossDeviceIdSrc {
	return p.CrossDeviceIDSrc
}
func (p *CrossDeviceData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CrossDeviceData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := CrossDeviceId(v)
		p.CrossDeviceID = temp
	}
	return nil
}

func (p *CrossDeviceData) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := CrossDeviceIdType(v)
		p.CrossDeviceIDType = temp
	}
	return nil
}

func (p *CrossDeviceData) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := CrossDeviceIdSrc(v)
		p.CrossDeviceIDSrc = temp
	}
	return nil
}

func (p *CrossDeviceData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrossDeviceData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrossDeviceData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cross_device_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cross_device_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.CrossDeviceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cross_device_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cross_device_id: ", p), err)
	}
	return err
}

func (p *CrossDeviceData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cross_device_id_type", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cross_device_id_type: ", p), err)
	}
	if err := oprot.WriteString(string(p.CrossDeviceIDType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cross_device_id_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cross_device_id_type: ", p), err)
	}
	return err
}

func (p *CrossDeviceData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cross_device_id_src", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cross_device_id_src: ", p), err)
	}
	if err := oprot.WriteString(string(p.CrossDeviceIDSrc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cross_device_id_src (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cross_device_id_src: ", p), err)
	}
	return err
}

func (p *CrossDeviceData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrossDeviceData(%+v)", *p)
}
