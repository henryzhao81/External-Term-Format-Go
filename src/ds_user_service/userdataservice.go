// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ds_user_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type UserDataService interface {
	// Parameters:
	//  - StorageID
	//  - Context
	GetPublisherSegments(storage_id StorageId, context Context) (r PublisherSegments, err error)
	// Parameters:
	//  - StorageID
	//  - ConversionID
	//  - Context
	GetConversions(storage_id StorageId, conversion_id ConversionId, context Context) (r Conversions, err error)
	// Parameters:
	//  - MarketID
	//  - Context
	GetAdvertisersData(market_id MarketId, context Context) (r *AdvertisersData, err error)
	// Parameters:
	//  - ID
	//  - PlatformHash
	//  - Context
	GetCookieState(id CookieStateId, platform_hash PlatformHash, context Context) (r CookieState, err error)
	// Parameters:
	//  - ID
	//  - Data
	//  - Context
	SetDeviceData(id DeviceId, data DeviceData, context Context) (err error)
	// Parameters:
	//  - ID
	//  - Context
	DelDeviceData(id DeviceId, context Context) (err error)
	// Parameters:
	//  - ID
	//  - Keys
	//  - Context
	DelDeviceDataByKey(id DeviceId, keys DeviceDataKeys, context Context) (err error)
	// Parameters:
	//  - ID
	//  - Context
	GetDeviceData(id DeviceId, context Context) (r DeviceData, err error)
	// Parameters:
	//  - ID
	//  - Context
	IsOptedOut(id DeviceId, context Context) (r bool, err error)
	// Parameters:
	//  - StorageID
	//  - Context
	GetCrossDeviceData(storage_id StorageId, context Context) (r *CrossDeviceData, err error)
}

type UserDataServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserDataServiceClient {
	return &UserDataServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserDataServiceClient {
	return &UserDataServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - StorageID
//  - Context
func (p *UserDataServiceClient) GetPublisherSegments(storage_id StorageId, context Context) (r PublisherSegments, err error) {
	if err = p.sendGetPublisherSegments(storage_id, context); err != nil {
		return
	}
	return p.recvGetPublisherSegments()
}

func (p *UserDataServiceClient) sendGetPublisherSegments(storage_id StorageId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPublisherSegments", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetPublisherSegmentsArgs{
		StorageID: storage_id,
		Context:   context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetPublisherSegments() (value PublisherSegments, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getPublisherSegments" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPublisherSegments failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPublisherSegments failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPublisherSegments failed: invalid message type")
		return
	}
	result := UserDataServiceGetPublisherSegmentsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - StorageID
//  - ConversionID
//  - Context
func (p *UserDataServiceClient) GetConversions(storage_id StorageId, conversion_id ConversionId, context Context) (r Conversions, err error) {
	if err = p.sendGetConversions(storage_id, conversion_id, context); err != nil {
		return
	}
	return p.recvGetConversions()
}

func (p *UserDataServiceClient) sendGetConversions(storage_id StorageId, conversion_id ConversionId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getConversions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetConversionsArgs{
		StorageID:    storage_id,
		ConversionID: conversion_id,
		Context:      context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetConversions() (value Conversions, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getConversions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getConversions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getConversions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConversions failed: invalid message type")
		return
	}
	result := UserDataServiceGetConversionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MarketID
//  - Context
func (p *UserDataServiceClient) GetAdvertisersData(market_id MarketId, context Context) (r *AdvertisersData, err error) {
	if err = p.sendGetAdvertisersData(market_id, context); err != nil {
		return
	}
	return p.recvGetAdvertisersData()
}

func (p *UserDataServiceClient) sendGetAdvertisersData(market_id MarketId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAdvertisersData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetAdvertisersDataArgs{
		MarketID: market_id,
		Context:  context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetAdvertisersData() (value *AdvertisersData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAdvertisersData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAdvertisersData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAdvertisersData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAdvertisersData failed: invalid message type")
		return
	}
	result := UserDataServiceGetAdvertisersDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - PlatformHash
//  - Context
func (p *UserDataServiceClient) GetCookieState(id CookieStateId, platform_hash PlatformHash, context Context) (r CookieState, err error) {
	if err = p.sendGetCookieState(id, platform_hash, context); err != nil {
		return
	}
	return p.recvGetCookieState()
}

func (p *UserDataServiceClient) sendGetCookieState(id CookieStateId, platform_hash PlatformHash, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCookieState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetCookieStateArgs{
		ID:           id,
		PlatformHash: platform_hash,
		Context:      context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetCookieState() (value CookieState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCookieState" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCookieState failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCookieState failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCookieState failed: invalid message type")
		return
	}
	result := UserDataServiceGetCookieStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Data
//  - Context
func (p *UserDataServiceClient) SetDeviceData(id DeviceId, data DeviceData, context Context) (err error) {
	if err = p.sendSetDeviceData(id, data, context); err != nil {
		return
	}
	return p.recvSetDeviceData()
}

func (p *UserDataServiceClient) sendSetDeviceData(id DeviceId, data DeviceData, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setDeviceData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceSetDeviceDataArgs{
		ID:      id,
		Data:    data,
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvSetDeviceData() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setDeviceData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setDeviceData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setDeviceData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setDeviceData failed: invalid message type")
		return
	}
	result := UserDataServiceSetDeviceDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ID
//  - Context
func (p *UserDataServiceClient) DelDeviceData(id DeviceId, context Context) (err error) {
	if err = p.sendDelDeviceData(id, context); err != nil {
		return
	}
	return p.recvDelDeviceData()
}

func (p *UserDataServiceClient) sendDelDeviceData(id DeviceId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delDeviceData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceDelDeviceDataArgs{
		ID:      id,
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvDelDeviceData() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delDeviceData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delDeviceData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delDeviceData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delDeviceData failed: invalid message type")
		return
	}
	result := UserDataServiceDelDeviceDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ID
//  - Keys
//  - Context
func (p *UserDataServiceClient) DelDeviceDataByKey(id DeviceId, keys DeviceDataKeys, context Context) (err error) {
	if err = p.sendDelDeviceDataByKey(id, keys, context); err != nil {
		return
	}
	return p.recvDelDeviceDataByKey()
}

func (p *UserDataServiceClient) sendDelDeviceDataByKey(id DeviceId, keys DeviceDataKeys, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delDeviceDataByKey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceDelDeviceDataByKeyArgs{
		ID:      id,
		Keys:    keys,
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvDelDeviceDataByKey() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delDeviceDataByKey" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delDeviceDataByKey failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delDeviceDataByKey failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delDeviceDataByKey failed: invalid message type")
		return
	}
	result := UserDataServiceDelDeviceDataByKeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - ID
//  - Context
func (p *UserDataServiceClient) GetDeviceData(id DeviceId, context Context) (r DeviceData, err error) {
	if err = p.sendGetDeviceData(id, context); err != nil {
		return
	}
	return p.recvGetDeviceData()
}

func (p *UserDataServiceClient) sendGetDeviceData(id DeviceId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDeviceData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetDeviceDataArgs{
		ID:      id,
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetDeviceData() (value DeviceData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDeviceData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDeviceData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDeviceData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDeviceData failed: invalid message type")
		return
	}
	result := UserDataServiceGetDeviceDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Context
func (p *UserDataServiceClient) IsOptedOut(id DeviceId, context Context) (r bool, err error) {
	if err = p.sendIsOptedOut(id, context); err != nil {
		return
	}
	return p.recvIsOptedOut()
}

func (p *UserDataServiceClient) sendIsOptedOut(id DeviceId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isOptedOut", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceIsOptedOutArgs{
		ID:      id,
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvIsOptedOut() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isOptedOut" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isOptedOut failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isOptedOut failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isOptedOut failed: invalid message type")
		return
	}
	result := UserDataServiceIsOptedOutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - StorageID
//  - Context
func (p *UserDataServiceClient) GetCrossDeviceData(storage_id StorageId, context Context) (r *CrossDeviceData, err error) {
	if err = p.sendGetCrossDeviceData(storage_id, context); err != nil {
		return
	}
	return p.recvGetCrossDeviceData()
}

func (p *UserDataServiceClient) sendGetCrossDeviceData(storage_id StorageId, context Context) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCrossDeviceData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserDataServiceGetCrossDeviceDataArgs{
		StorageID: storage_id,
		Context:   context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserDataServiceClient) recvGetCrossDeviceData() (value *CrossDeviceData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCrossDeviceData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCrossDeviceData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCrossDeviceData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCrossDeviceData failed: invalid message type")
		return
	}
	result := UserDataServiceGetCrossDeviceDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UserDataServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserDataService
}

func (p *UserDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserDataServiceProcessor(handler UserDataService) *UserDataServiceProcessor {

	self28 := &UserDataServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["getPublisherSegments"] = &userDataServiceProcessorGetPublisherSegments{handler: handler}
	self28.processorMap["getConversions"] = &userDataServiceProcessorGetConversions{handler: handler}
	self28.processorMap["getAdvertisersData"] = &userDataServiceProcessorGetAdvertisersData{handler: handler}
	self28.processorMap["getCookieState"] = &userDataServiceProcessorGetCookieState{handler: handler}
	self28.processorMap["setDeviceData"] = &userDataServiceProcessorSetDeviceData{handler: handler}
	self28.processorMap["delDeviceData"] = &userDataServiceProcessorDelDeviceData{handler: handler}
	self28.processorMap["delDeviceDataByKey"] = &userDataServiceProcessorDelDeviceDataByKey{handler: handler}
	self28.processorMap["getDeviceData"] = &userDataServiceProcessorGetDeviceData{handler: handler}
	self28.processorMap["isOptedOut"] = &userDataServiceProcessorIsOptedOut{handler: handler}
	self28.processorMap["getCrossDeviceData"] = &userDataServiceProcessorGetCrossDeviceData{handler: handler}
	return self28
}

func (p *UserDataServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x29

}

type userDataServiceProcessorGetPublisherSegments struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetPublisherSegments) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetPublisherSegmentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPublisherSegments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetPublisherSegmentsResult{}
	var retval PublisherSegments
	var err2 error
	if retval, err2 = p.handler.GetPublisherSegments(args.StorageID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublisherSegments: "+err2.Error())
		oprot.WriteMessageBegin("getPublisherSegments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPublisherSegments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorGetConversions struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetConversions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetConversionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getConversions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetConversionsResult{}
	var retval Conversions
	var err2 error
	if retval, err2 = p.handler.GetConversions(args.StorageID, args.ConversionID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConversions: "+err2.Error())
		oprot.WriteMessageBegin("getConversions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getConversions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorGetAdvertisersData struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetAdvertisersData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetAdvertisersDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAdvertisersData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetAdvertisersDataResult{}
	var retval *AdvertisersData
	var err2 error
	if retval, err2 = p.handler.GetAdvertisersData(args.MarketID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAdvertisersData: "+err2.Error())
		oprot.WriteMessageBegin("getAdvertisersData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAdvertisersData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorGetCookieState struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetCookieState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetCookieStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCookieState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetCookieStateResult{}
	var retval CookieState
	var err2 error
	if retval, err2 = p.handler.GetCookieState(args.ID, args.PlatformHash, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCookieState: "+err2.Error())
		oprot.WriteMessageBegin("getCookieState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCookieState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorSetDeviceData struct {
	handler UserDataService
}

func (p *userDataServiceProcessorSetDeviceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceSetDeviceDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceSetDeviceDataResult{}
	var err2 error
	if err2 = p.handler.SetDeviceData(args.ID, args.Data, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setDeviceData: "+err2.Error())
		oprot.WriteMessageBegin("setDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("setDeviceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorDelDeviceData struct {
	handler UserDataService
}

func (p *userDataServiceProcessorDelDeviceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceDelDeviceDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceDelDeviceDataResult{}
	var err2 error
	if err2 = p.handler.DelDeviceData(args.ID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delDeviceData: "+err2.Error())
		oprot.WriteMessageBegin("delDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("delDeviceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorDelDeviceDataByKey struct {
	handler UserDataService
}

func (p *userDataServiceProcessorDelDeviceDataByKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceDelDeviceDataByKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delDeviceDataByKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceDelDeviceDataByKeyResult{}
	var err2 error
	if err2 = p.handler.DelDeviceDataByKey(args.ID, args.Keys, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delDeviceDataByKey: "+err2.Error())
		oprot.WriteMessageBegin("delDeviceDataByKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("delDeviceDataByKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorGetDeviceData struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetDeviceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetDeviceDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetDeviceDataResult{}
	var retval DeviceData
	var err2 error
	if retval, err2 = p.handler.GetDeviceData(args.ID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDeviceData: "+err2.Error())
		oprot.WriteMessageBegin("getDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDeviceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorIsOptedOut struct {
	handler UserDataService
}

func (p *userDataServiceProcessorIsOptedOut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceIsOptedOutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isOptedOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceIsOptedOutResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsOptedOut(args.ID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isOptedOut: "+err2.Error())
		oprot.WriteMessageBegin("isOptedOut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isOptedOut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userDataServiceProcessorGetCrossDeviceData struct {
	handler UserDataService
}

func (p *userDataServiceProcessorGetCrossDeviceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserDataServiceGetCrossDeviceDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCrossDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserDataServiceGetCrossDeviceDataResult{}
	var retval *CrossDeviceData
	var err2 error
	if retval, err2 = p.handler.GetCrossDeviceData(args.StorageID, args.Context); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCrossDeviceData: "+err2.Error())
		oprot.WriteMessageBegin("getCrossDeviceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCrossDeviceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - StorageID
//  - Context
type UserDataServiceGetPublisherSegmentsArgs struct {
	StorageID StorageId `thrift:"storage_id,1" json:"storage_id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetPublisherSegmentsArgs() *UserDataServiceGetPublisherSegmentsArgs {
	return &UserDataServiceGetPublisherSegmentsArgs{}
}

func (p *UserDataServiceGetPublisherSegmentsArgs) GetStorageID() StorageId {
	return p.StorageID
}

func (p *UserDataServiceGetPublisherSegmentsArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetPublisherSegmentsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := StorageId(v)
		p.StorageID = temp
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.Context[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublisherSegments_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storage_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storage_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.StorageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.storage_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storage_id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetPublisherSegmentsArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetPublisherSegmentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetPublisherSegmentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetPublisherSegmentsResult struct {
	Success PublisherSegments `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetPublisherSegmentsResult() *UserDataServiceGetPublisherSegmentsResult {
	return &UserDataServiceGetPublisherSegmentsResult{}
}

var UserDataServiceGetPublisherSegmentsResult_Success_DEFAULT PublisherSegments

func (p *UserDataServiceGetPublisherSegmentsResult) GetSuccess() PublisherSegments {
	return p.Success
}
func (p *UserDataServiceGetPublisherSegmentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetPublisherSegmentsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(PublisherSegments, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &PubSegment{}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.Success = append(p.Success, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublisherSegments_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetPublisherSegmentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetPublisherSegmentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetPublisherSegmentsResult(%+v)", *p)
}

// Attributes:
//  - StorageID
//  - ConversionID
//  - Context
type UserDataServiceGetConversionsArgs struct {
	StorageID    StorageId    `thrift:"storage_id,1" json:"storage_id"`
	ConversionID ConversionId `thrift:"conversion_id,2" json:"conversion_id"`
	// unused fields # 3 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetConversionsArgs() *UserDataServiceGetConversionsArgs {
	return &UserDataServiceGetConversionsArgs{}
}

func (p *UserDataServiceGetConversionsArgs) GetStorageID() StorageId {
	return p.StorageID
}

func (p *UserDataServiceGetConversionsArgs) GetConversionID() ConversionId {
	return p.ConversionID
}

func (p *UserDataServiceGetConversionsArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetConversionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := StorageId(v)
		p.StorageID = temp
	}
	return nil
}

func (p *UserDataServiceGetConversionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ConversionId(v)
		p.ConversionID = temp
	}
	return nil
}

func (p *UserDataServiceGetConversionsArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key33 = v
		}
		var _val34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val34 = v
		}
		p.Context[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getConversions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storage_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storage_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.StorageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.storage_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storage_id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetConversionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conversion_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conversion_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConversionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.conversion_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conversion_id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetConversionsArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetConversionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetConversionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetConversionsResult struct {
	Success Conversions `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetConversionsResult() *UserDataServiceGetConversionsResult {
	return &UserDataServiceGetConversionsResult{}
}

var UserDataServiceGetConversionsResult_Success_DEFAULT Conversions

func (p *UserDataServiceGetConversionsResult) GetSuccess() Conversions {
	return p.Success
}
func (p *UserDataServiceGetConversionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetConversionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(Conversions, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem35 := &UserConv{}
		if err := _elem35.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
		}
		p.Success = append(p.Success, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getConversions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetConversionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetConversionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetConversionsResult(%+v)", *p)
}

// Attributes:
//  - MarketID
//  - Context
type UserDataServiceGetAdvertisersDataArgs struct {
	MarketID MarketId `thrift:"market_id,1" json:"market_id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetAdvertisersDataArgs() *UserDataServiceGetAdvertisersDataArgs {
	return &UserDataServiceGetAdvertisersDataArgs{}
}

func (p *UserDataServiceGetAdvertisersDataArgs) GetMarketID() MarketId {
	return p.MarketID
}

func (p *UserDataServiceGetAdvertisersDataArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetAdvertisersDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := MarketId(v)
		p.MarketID = temp
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key36 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key36 = v
		}
		var _val37 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val37 = v
		}
		p.Context[_key36] = _val37
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAdvertisersData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("market_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:market_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.MarketID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.market_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:market_id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetAdvertisersDataArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetAdvertisersDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetAdvertisersDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetAdvertisersDataResult struct {
	Success *AdvertisersData `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetAdvertisersDataResult() *UserDataServiceGetAdvertisersDataResult {
	return &UserDataServiceGetAdvertisersDataResult{}
}

var UserDataServiceGetAdvertisersDataResult_Success_DEFAULT *AdvertisersData

func (p *UserDataServiceGetAdvertisersDataResult) GetSuccess() *AdvertisersData {
	if !p.IsSetSuccess() {
		return UserDataServiceGetAdvertisersDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserDataServiceGetAdvertisersDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetAdvertisersDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AdvertisersData{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAdvertisersData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetAdvertisersDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetAdvertisersDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetAdvertisersDataResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - PlatformHash
//  - Context
type UserDataServiceGetCookieStateArgs struct {
	ID           CookieStateId `thrift:"id,1" json:"id"`
	PlatformHash PlatformHash  `thrift:"platform_hash,2" json:"platform_hash"`
	// unused fields # 3 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetCookieStateArgs() *UserDataServiceGetCookieStateArgs {
	return &UserDataServiceGetCookieStateArgs{}
}

func (p *UserDataServiceGetCookieStateArgs) GetID() CookieStateId {
	return p.ID
}

func (p *UserDataServiceGetCookieStateArgs) GetPlatformHash() PlatformHash {
	return p.PlatformHash
}

func (p *UserDataServiceGetCookieStateArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetCookieStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetCookieStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := CookieStateId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceGetCookieStateArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := PlatformHash(v)
		p.PlatformHash = temp
	}
	return nil
}

func (p *UserDataServiceGetCookieStateArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key38 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key38 = v
		}
		var _val39 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val39 = v
		}
		p.Context[_key38] = _val39
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCookieStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCookieState_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCookieStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetCookieStateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("platform_hash", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:platform_hash: ", p), err)
	}
	if err := oprot.WriteString(string(p.PlatformHash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.platform_hash (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:platform_hash: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetCookieStateArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetCookieStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetCookieStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetCookieStateResult struct {
	Success *CookieState `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetCookieStateResult() *UserDataServiceGetCookieStateResult {
	return &UserDataServiceGetCookieStateResult{}
}

var UserDataServiceGetCookieStateResult_Success_DEFAULT CookieState

func (p *UserDataServiceGetCookieStateResult) GetSuccess() CookieState {
	if !p.IsSetSuccess() {
		return UserDataServiceGetCookieStateResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserDataServiceGetCookieStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetCookieStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetCookieStateResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := CookieState(v)
		p.Success = &temp
	}
	return nil
}

func (p *UserDataServiceGetCookieStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCookieState_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCookieStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetCookieStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetCookieStateResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Data
//  - Context
type UserDataServiceSetDeviceDataArgs struct {
	ID   DeviceId   `thrift:"id,1" json:"id"`
	Data DeviceData `thrift:"data,2" json:"data"`
	// unused fields # 3 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceSetDeviceDataArgs() *UserDataServiceSetDeviceDataArgs {
	return &UserDataServiceSetDeviceDataArgs{}
}

func (p *UserDataServiceSetDeviceDataArgs) GetID() DeviceId {
	return p.ID
}

func (p *UserDataServiceSetDeviceDataArgs) GetData() DeviceData {
	return p.Data
}

func (p *UserDataServiceSetDeviceDataArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceSetDeviceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DeviceId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(DeviceData, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &DeviceDatum{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.Data = append(p.Data, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key41 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key41 = v
		}
		var _val42 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val42 = v
		}
		p.Context[_key41] = _val42
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setDeviceData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceSetDeviceDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *UserDataServiceSetDeviceDataArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceSetDeviceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceSetDeviceDataArgs(%+v)", *p)
}

type UserDataServiceSetDeviceDataResult struct {
}

func NewUserDataServiceSetDeviceDataResult() *UserDataServiceSetDeviceDataResult {
	return &UserDataServiceSetDeviceDataResult{}
}

func (p *UserDataServiceSetDeviceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setDeviceData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceSetDeviceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceSetDeviceDataResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Context
type UserDataServiceDelDeviceDataArgs struct {
	ID DeviceId `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceDelDeviceDataArgs() *UserDataServiceDelDeviceDataArgs {
	return &UserDataServiceDelDeviceDataArgs{}
}

func (p *UserDataServiceDelDeviceDataArgs) GetID() DeviceId {
	return p.ID
}

func (p *UserDataServiceDelDeviceDataArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceDelDeviceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DeviceId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key43 = v
		}
		var _val44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val44 = v
		}
		p.Context[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDeviceData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceDelDeviceDataArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceDelDeviceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceDelDeviceDataArgs(%+v)", *p)
}

type UserDataServiceDelDeviceDataResult struct {
}

func NewUserDataServiceDelDeviceDataResult() *UserDataServiceDelDeviceDataResult {
	return &UserDataServiceDelDeviceDataResult{}
}

func (p *UserDataServiceDelDeviceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDeviceData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceDelDeviceDataResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Keys
//  - Context
type UserDataServiceDelDeviceDataByKeyArgs struct {
	ID   DeviceId       `thrift:"id,1" json:"id"`
	Keys DeviceDataKeys `thrift:"keys,2" json:"keys"`
	// unused fields # 3 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceDelDeviceDataByKeyArgs() *UserDataServiceDelDeviceDataByKeyArgs {
	return &UserDataServiceDelDeviceDataByKeyArgs{}
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) GetID() DeviceId {
	return p.ID
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) GetKeys() DeviceDataKeys {
	return p.Keys
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceDelDeviceDataByKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DeviceId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(DeviceDataKeys, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem45 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem45 = v
		}
		p.Keys = append(p.Keys, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key46 = v
		}
		var _val47 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val47 = v
		}
		p.Context[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDeviceDataByKey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err)
	}
	return err
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceDelDeviceDataByKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceDelDeviceDataByKeyArgs(%+v)", *p)
}

type UserDataServiceDelDeviceDataByKeyResult struct {
}

func NewUserDataServiceDelDeviceDataByKeyResult() *UserDataServiceDelDeviceDataByKeyResult {
	return &UserDataServiceDelDeviceDataByKeyResult{}
}

func (p *UserDataServiceDelDeviceDataByKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delDeviceDataByKey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceDelDeviceDataByKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceDelDeviceDataByKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Context
type UserDataServiceGetDeviceDataArgs struct {
	ID DeviceId `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetDeviceDataArgs() *UserDataServiceGetDeviceDataArgs {
	return &UserDataServiceGetDeviceDataArgs{}
}

func (p *UserDataServiceGetDeviceDataArgs) GetID() DeviceId {
	return p.ID
}

func (p *UserDataServiceGetDeviceDataArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetDeviceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DeviceId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key48 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key48 = v
		}
		var _val49 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val49 = v
		}
		p.Context[_key48] = _val49
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDeviceData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetDeviceDataArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetDeviceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetDeviceDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetDeviceDataResult struct {
	Success DeviceData `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetDeviceDataResult() *UserDataServiceGetDeviceDataResult {
	return &UserDataServiceGetDeviceDataResult{}
}

var UserDataServiceGetDeviceDataResult_Success_DEFAULT DeviceData

func (p *UserDataServiceGetDeviceDataResult) GetSuccess() DeviceData {
	return p.Success
}
func (p *UserDataServiceGetDeviceDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetDeviceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(DeviceData, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem50 := &DeviceDatum{}
		if err := _elem50.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
		}
		p.Success = append(p.Success, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDeviceData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetDeviceDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetDeviceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetDeviceDataResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Context
type UserDataServiceIsOptedOutArgs struct {
	ID DeviceId `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceIsOptedOutArgs() *UserDataServiceIsOptedOutArgs {
	return &UserDataServiceIsOptedOutArgs{}
}

func (p *UserDataServiceIsOptedOutArgs) GetID() DeviceId {
	return p.ID
}

func (p *UserDataServiceIsOptedOutArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceIsOptedOutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceIsOptedOutArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DeviceId(v)
		p.ID = temp
	}
	return nil
}

func (p *UserDataServiceIsOptedOutArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key51 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key51 = v
		}
		var _val52 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val52 = v
		}
		p.Context[_key51] = _val52
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceIsOptedOutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isOptedOut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceIsOptedOutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserDataServiceIsOptedOutArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceIsOptedOutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceIsOptedOutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceIsOptedOutResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceIsOptedOutResult() *UserDataServiceIsOptedOutResult {
	return &UserDataServiceIsOptedOutResult{}
}

var UserDataServiceIsOptedOutResult_Success_DEFAULT bool

func (p *UserDataServiceIsOptedOutResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return UserDataServiceIsOptedOutResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserDataServiceIsOptedOutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceIsOptedOutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceIsOptedOutResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserDataServiceIsOptedOutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isOptedOut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceIsOptedOutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceIsOptedOutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceIsOptedOutResult(%+v)", *p)
}

// Attributes:
//  - StorageID
//  - Context
type UserDataServiceGetCrossDeviceDataArgs struct {
	StorageID StorageId `thrift:"storage_id,1" json:"storage_id"`
	// unused fields # 2 to 9
	Context Context `thrift:"context,10" json:"context"`
}

func NewUserDataServiceGetCrossDeviceDataArgs() *UserDataServiceGetCrossDeviceDataArgs {
	return &UserDataServiceGetCrossDeviceDataArgs{}
}

func (p *UserDataServiceGetCrossDeviceDataArgs) GetStorageID() StorageId {
	return p.StorageID
}

func (p *UserDataServiceGetCrossDeviceDataArgs) GetContext() Context {
	return p.Context
}
func (p *UserDataServiceGetCrossDeviceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := StorageId(v)
		p.StorageID = temp
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataArgs) readField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Context, size)
	p.Context = tMap
	for i := 0; i < size; i++ {
		var _key53 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key53 = v
		}
		var _val54 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val54 = v
		}
		p.Context[_key53] = _val54
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCrossDeviceData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storage_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storage_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.StorageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.storage_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storage_id: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetCrossDeviceDataArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:context: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Context {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:context: ", p), err)
	}
	return err
}

func (p *UserDataServiceGetCrossDeviceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetCrossDeviceDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserDataServiceGetCrossDeviceDataResult struct {
	Success *CrossDeviceData `thrift:"success,0" json:"success,omitempty"`
}

func NewUserDataServiceGetCrossDeviceDataResult() *UserDataServiceGetCrossDeviceDataResult {
	return &UserDataServiceGetCrossDeviceDataResult{}
}

var UserDataServiceGetCrossDeviceDataResult_Success_DEFAULT *CrossDeviceData

func (p *UserDataServiceGetCrossDeviceDataResult) GetSuccess() *CrossDeviceData {
	if !p.IsSetSuccess() {
		return UserDataServiceGetCrossDeviceDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserDataServiceGetCrossDeviceDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserDataServiceGetCrossDeviceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CrossDeviceData{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCrossDeviceData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDataServiceGetCrossDeviceDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserDataServiceGetCrossDeviceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDataServiceGetCrossDeviceDataResult(%+v)", *p)
}
